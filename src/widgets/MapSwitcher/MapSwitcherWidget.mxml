<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:viewer="com.esri.viewer.*"
                   xmlns:toc="com.esri.viewer.components.toc.*"
                   widgetConfigLoaded="widgetConfigLoadedHandler()">

    <viewer:states>
        <s:State name="normal"/>
        <s:State name="noBasemaps"/>
    </viewer:states>

    <fx:Script>
        <![CDATA[
            import com.esri.viewer.AppEvent;

            import mx.collections.ArrayCollection;
            import mx.collections.ArrayList;
            import mx.core.FlexGlobals;
            import mx.events.FlexEvent;

            import spark.events.IndexChangeEvent;

            private var hideTimer:Timer = new Timer(300, 1); // TODO - redo with transition

            private var hideSuspended:Boolean = false;
            import com.esri.viewer.components.TitlebarButton;

            import flash.events.Event;
            import flash.events.MouseEvent;

            import mx.controls.Image;
            import mx.core.FlexGlobals;
            import mx.core.UIComponent;
            import mx.events.FlexEvent;
            import mx.managers.CursorManager;
            import mx.managers.DragManager;

            import spark.components.Application;
            import spark.components.Group;
            import spark.components.SkinnableContainer;

            private var _cursorID:int = 0;

            [Bindable]
            private var basemapList:ArrayList;

            [Bindable]
            private var opLayerListButtonLabel:String;

            [Embed(source = "/assets/images/w_resizecursor.png")]
            public var resizeCursor:Class;

            [Embed(source = "/assets/images/w_resizecursor_rtl.png")]
            public var resizeCursor_rtl:Class;

            private function widgetConfigLoadedHandler():void
            {
                var expandLayerItems:Boolean = false;

                if (configXML)
                {
                    opLayerListButtonLabel = configXML.layerlist.@label || getDefaultString("layerListLabel");
                    if (configXML.layerlist.@visible[0])
                    {
                        if (configXML.layerlist.@visible == "true")
                        {
                            // check if there are any op layers
                            AppEvent.dispatch(AppEvent.DATA_OPT_LAYERS, null, getOpLayers);
                        }
                    }
                    else
                    {
                        // check if there are any op layers
                        AppEvent.dispatch(AppEvent.DATA_OPT_LAYERS, null, getOpLayers);
                    }
                    // added in version 2.5
                    expandLayerItems = configXML.expandlayeritems == "true";
                }

                initBasemapButtonBar();
                if (opLayerListButton.visible) // do not initialize TOC if there are no operational layers
                {
                    initTOC(expandLayerItems);
                }

                hideTimer.addEventListener(TimerEvent.TIMER_COMPLETE, hideTimer_timerCompleteHandler, false, 0, true);

                AppEvent.addListener(AppEvent.SUSPEND_TOC_HIDE_TIMER, suspendHideListener);
            }

            private function suspendHideListener(event:AppEvent):void
            {
                if (event.data)
                {
                    hideSuspended = true;
                }
                else
                {
                    hideSuspended = false;
                }
            }

            private function initBasemapButtonBar():void
            {
                basemapList = new ArrayList();
                var labels:Array = [];
                for each (var basemap:Object in configData.basemaps)
                {
                    var label:String = basemap.label;
                    if (labels.indexOf(label) == -1) // avoid duplicates using the labels
                    {
                        labels.push(label);
                        basemapList.addItem(basemap);
                    }
                }

                if (basemapList.length <= 1)
                {
                    this.currentState = "noBasemaps";
                }
                else
                {
                    setBasemapButtonBarIndexToTopmostVisibleBasemap();
                }
            }

            private function initTOC(expandLayerItems:Boolean = false):void
            {
                toc.map = map;
                toc.isMapServiceOnly = false; //gotta get this from the config file
                toc.excludeLayers = getExcludeLayers();
                toc.excludeGraphicsLayers = true;
                if (expandLayerItems)
                {
                    toc.expandLayerItems();
                }
            }

            private function getExcludeLayers():ArrayCollection
            {
                var excludeLayers:ArrayCollection = new ArrayCollection();

                if (configData && configData.basemaps)
                {
                    // exclude basemaps
                    for (var i:int = 0; i < configData.basemaps.length; i++)
                    {
                        excludeLayers.addItem(configData.basemaps[i].label);
                    }
                }

                if (configXML)
                {
                    // exclude these layers
                    var layers:XMLList = configXML.layerlist.excludelayer as XMLList;
                    for (var j:int = 0; j < layers.length(); j++)
                    {
                        excludeLayers.addItem(layers[j].toString());
                    }

                    // also exclude layers specified in the main config xml
                    for each (var label:String in configData.excludeLayers)
                    {
                        excludeLayers.addItem(label);
                    }
                }

                return excludeLayers;
            }

            private function getOpLayers(event:AppEvent):void
            {
                var opLayersList:Array = event.data as Array;
                if (opLayersList.length > 0)
                {
                    opLayerListButton.visible = true;
                }
            }

            private function setBasemapButtonBarIndexToTopmostVisibleBasemap():void
            {
                for (var i:int; i < basemapList.length; i++)
                {
                    if (basemapList.getItemAt(i).visible)
                    {
                        basemapButtonBar.selectedIndex = i;
                    }
                }
            }

            private function hideTimer_timerCompleteHandler(event:TimerEvent):void
            {
                if (!hideSuspended)
                {
                    AppEvent.dispatch(AppEvent.TOC_HIDDEN);
                    opLayersContainer.visible = false;
                }
            }

            private function startHideTimer():void
            {
                hideTimer.reset();
                hideTimer.start();
            }

            private function opLayerListButton_clickHandler(event:MouseEvent):void
            {
                opLayersContainer.visible = !opLayersContainer.visible;
                updateOpLayersContainerPosition();
            }

            private function updateOpLayersContainerPosition():void
            {
                var opLayersContainerGlobalBottomRightPoint:Point = opLayersContainer.parent.localToGlobal(new Point(opLayersContainer.width, opLayersContainer.height));
                positionOpLayersContainerHorizontally(opLayersContainerGlobalBottomRightPoint.x);
                positionOpLayersContainerVertically(opLayersContainerGlobalBottomRightPoint.y);
            }

            private function positionOpLayersContainerHorizontally(x:Number):void
            {
                var appWidth:Number = FlexGlobals.topLevelApplication.width;
                if (x > appWidth)
                {
                    opLayersContainer.x = -opLayersContainer.width + opLayerListButton.width;
                }
                else
                {
                    opLayersContainer.x = 0;
                }
            }

            private function positionOpLayersContainerVertically(y:Number):void
            {
                var appHeight:Number = FlexGlobals.topLevelApplication.height;
                if (y > appHeight)
                {
                    opLayersContainer.y = mapLayersContainer.y + 1 - opLayersContainer.height;
                }
                else
                {
                    opLayersContainer.y = mapLayersContainer.height - 1;
                }
            }

            private function basemapButtonBar_changeHandler(event:IndexChangeEvent):void
            {
                AppEvent.dispatch(AppEvent.BASEMAP_SWITCH, basemapList.getItemAt(event.newIndex).id);
            }

            protected function opLayersContainer_creationCompleteHandler(event:FlexEvent):void
            {
                var startHeight:Number = FlexGlobals.topLevelApplication.height - opLayersContainer.parent.y - opLayersContainer.y - 40;
                if (startHeight > 600)
                {
                    startHeight = 600;
                }
                opLayersContainer.height = startHeight;

                opLayersContainer.setStyle("backgroundColor", getStyle("contentBackgroundColor"));
                opLayersContainer.setStyle("skinClass", FlexGlobals.topLevelApplication.getStyle("skinClass"));

                resizeButton.addEventListener(MouseEvent.MOUSE_OVER, resize_overHandler);
                resizeButton.addEventListener(MouseEvent.MOUSE_OUT, resize_outHandler);
                resizeButton.addEventListener(MouseEvent.MOUSE_DOWN, resize_downHandler);
            }

            protected function opLayersContainer_clickHandler(event:MouseEvent):void
            {
                AppEvent.dispatch(AppEvent.TOC_HIDDEN); // always hide the toc layer menu
            }

            private function resize_overHandler(event:MouseEvent):void
            {
                if (isRtl())
                {
                    _cursorID = CursorManager.setCursor(resizeCursor_rtl, 2, -10, -10);
                }
                else
                {
                    _cursorID = CursorManager.setCursor(resizeCursor, 2, -10, -10);
                }
            }

            private function resize_outHandler(event:MouseEvent):void
            {
                CursorManager.removeCursor(_cursorID);
            }

            private function resize_downHandler(event:MouseEvent):void
            {
                stage.addEventListener(MouseEvent.MOUSE_MOVE, resize_moveHandler);
                stage.addEventListener(MouseEvent.MOUSE_UP, resize_upHandler);
            }

            public function isRtl():Boolean
            {
                var result:Boolean = false;
                try
                {
                    result = (FlexGlobals.topLevelApplication as Application).layoutDirection == "rtl";
                }
                catch (error:Error)
                {
                    result = false;
                }
                return result;
            }

            private function resize_moveHandler(event:MouseEvent):void
            {
                if (isRtl())
                {
                    resize_moveHandler_rtl();
                }
                else
                {
                    resize_moveHandler_normal();
                }
            }

            private function resize_moveHandler_normal():void
            {
                // if there is minWidth and minHeight specified on the container, use them while resizing
                const minimumResizeWidth:Number = opLayersContainer.minWidth ? opLayersContainer.minWidth : 200;
                const minimumResizeHeight:Number = opLayersContainer.minHeight ? opLayersContainer.minHeight : 100;

                if ((stage.mouseX < stage.width - 20) && (stage.mouseY < stage.height - 20))
                {
                    if ((stage.mouseX - opLayersContainer.parent.x) > minimumResizeWidth)
                    {
                        opLayersContainer.width = (stage.mouseX - opLayersContainer.parent.x - opLayersContainer.x);
                    }
                    if ((stage.mouseY - opLayersContainer.parent.y) > minimumResizeHeight)
                    {
                        opLayersContainer.height = (stage.mouseY - opLayersContainer.parent.y - opLayersContainer.y);
                    }
                }
            }

            private function resize_moveHandler_rtl():void
            {
                // if there is minWidth and minHeight specified on the container, use them while resizing
                const minimumResizeWidth:Number = minWidth ? minWidth : 200;
                const minimumResizeHeight:Number = minHeight ? minHeight : 100;

                var nextWidth:Number = stage.stageWidth - (stage.mouseX + opLayersContainer.x);
                var nextHeight:Number = (stage.mouseY - opLayersContainer.y);

                if (stage.mouseX > 20 && (stage.mouseY < stage.height - 20))
                {
                    if (nextWidth > minimumResizeWidth)
                    {
                        opLayersContainer.width = nextWidth;
                    }
                    if (nextHeight > minimumResizeHeight)
                    {
                        opLayersContainer.height = nextHeight;
                    }
                }
            }

            private function resize_upHandler(event:MouseEvent):void
            {

                stage.removeEventListener(MouseEvent.MOUSE_MOVE, resize_moveHandler);
                stage.removeEventListener(MouseEvent.MOUSE_UP, resize_upHandler);

                var p:UIComponent = parent as UIComponent;
                p.stopDrag();
            }

            protected function resizeButton_preinitializeHandler(event:FlexEvent):void
            {
                if (isRtl())
                {
                    resizeButton.source = "assets/images/w_resize_rtl.png";
                }
                else
                {
                    resizeButton.source = "assets/images/w_resize.png";
                }
            }
        ]]>
    </fx:Script>

    <s:HGroup id="mapLayersContainer" gap="9">
        <s:Button id="opLayerListButton"
                  label="{opLayerListButtonLabel}"
                  click="opLayerListButton_clickHandler(event)"
                  visible="false"/>
        <s:ButtonBar id="basemapButtonBar"
                     change="basemapButtonBar_changeHandler(event)"
                     dataProvider="{basemapList}"
                     excludeFrom="noBasemaps"
                     labelField="label"
                     requireSelection="true"/>
    </s:HGroup>
    <s:BorderContainer id="opLayersContainer"
                       width="265" height="180"
                       click="opLayersContainer_clickHandler(event)"
                       creationComplete="opLayersContainer_creationCompleteHandler(event)"
                       includeInLayout="false"
                       visible="false">
        <toc:TOC id="toc"
                 left="2" right="2" top="3" bottom="3"/>
		<mx:Image id="resizeButton"
				  right="0" bottom="0"
				  preinitialize="resizeButton_preinitializeHandler(event)"
				  source="assets/images/w_resize.png"/>
    </s:BorderContainer>

</viewer:BaseWidget>
