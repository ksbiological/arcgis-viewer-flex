<?xml version="1.0" encoding="utf-8"?>
<!--
This widget contains code from ESRI's ArcGIS Viewer for Flex 3.0, which is
subject to the following notice.

///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->

<viewer:BaseWidget xmlns:esri="http://www.esri.com/2008/ags"
				   xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*"
				   x="600" y="300"
				   widgetConfigLoaded="init()">
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.Units;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.EditEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.supportClasses.AllDetails;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.symbols.TextSymbol;
			import com.esri.ags.tasks.GeometryService;
			import com.esri.ags.tasks.GeometryServiceSingleton;
			import com.esri.ags.tasks.supportClasses.ProjectParameters;
			import com.esri.ags.tools.DrawTool;
			import com.esri.ags.utils.GeometryUtil;
			import com.esri.ags.utils.GraphicUtil;
			import com.esri.ags.utils.WebMercatorUtil;
			import com.esri.viewer.AppEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Fault;
			import mx.rpc.events.FaultEvent;
			
			import spark.components.gridClasses.GridColumn;
			import spark.utils.DataItem;
			
			private const ICON_URL:String = "assets/images/";
			private const TEXT_MODE:String = "text";
			private const EPSG_GEOGRAPHIC:Number = 4326;
			
			//labels
			[Bindable]
			private var textLabel:String;
			[Bindable]
			private var textColorLabel:String;
			[Bindable]
			private var textFontLabel:String;
			[Bindable]
			private var textSizeLabel:String;
			[Bindable]
			private var textBoldLabel:String;
			[Bindable]
			private var textBoldTooltip:String;
			[Bindable]
			private var textItalicLabel:String;
			[Bindable]
			private var textItalicTooltip:String;
			[Bindable]
			private var textUnderlineLabel:String;
			[Bindable]
			private var textUnderlineTooltip:String;
			//points
			[Bindable]
			private var addTextLabel:String;
			[Bindable]
			private var drawPointLabel:String;
			[Bindable]
			private var markerAlphaLabel:String;
			[Bindable]
			private var markerColorLabel:String;
			[Bindable]
			private var markerSizeLabel:String;
			[Bindable]
			private var markerStyleLabel:String;
			[Bindable]
			private var markerOutlineColorLabel:String;
			[Bindable]
			private var markerOutlineWidthLabel:String;
			
			// lines
			[Bindable]
			private var drawLineLabel:String;
			[Bindable]
			private var drawFreehandLineLabel:String;
			[Bindable]
			private var lineAlphaLabel:String;
			[Bindable]
			private var lineColorLabel:String;
			[Bindable]
			private var lineStyleLabel:String;
			[Bindable]
			private var lineWidthLabel:String;
			
			// polygons
			[Bindable]
			private var drawPolygonLabel:String;
			[Bindable]
			private var drawFreehandPolygonLabel:String;
			[Bindable]
			private var drawRectangleLabel:String;
			[Bindable]
			private var drawCircleLabel:String;
			[Bindable]
			private var drawEllipseLabel:String;
			[Bindable]
			private var fillAlphaLabel:String;
			[Bindable]
			private var fillColorLabel:String;
			[Bindable]
			private var fillStyleLabel:String;
			[Bindable]
			private var fillOutlineColorLabel:String;
			[Bindable]
			private var fillOutlineWidthLabel:String;
			
			[Bindable]
			private var clearLabel:String;
			private var clearFeatureLabel:String;
			
			private var areaLabel:String;
			[Bindable]
			private var areaUnitsLabel:String;
			[Bindable]
			private var distanceUnitsLabel:String;
			[Bindable]
			private var showMeasurements:Boolean;
			[Bindable]
			private var showmeasurementsLabel:String;
			[Bindable]
			private var graphicsLayer:GraphicsLayer;
			
			[Bindable]
			private var drawingPoint:Boolean;
			[Bindable]
			private var addingText:Boolean;
			[Bindable]
			private var drawingLine:Boolean;
			[Bindable]
			private var drawingPolygon:Boolean;
			
			private var drawMode:String;
			private var lengthLabel:String;
			private var perimeterLabel:String;
			private var measurePt:MapPoint;
			private var drawType:String;
			private var drawStatus:String;
			private var selectedDrawingIcon:Image;
			private var lastDrawnGraphic:Graphic;
			private var editGraphic:Graphic;
			private var isEditing:Boolean;
			private var measurementLabelShown:Boolean;
			private var lastActiveEditType:String = "none"; // edit tool is not active
			
			[Bindable]
			private var selectedResultGraphicsLayer:GraphicsLayer;
			[Bindable]
			private var resultGraphicsLayer:GraphicsLayer;
			
			private var initialPolygonToolClick:MouseEvent;
			private var resultExtentFactor:Number = 2;
			
			[Bindable]
			private var resultsAC:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var reportURL:URLRequest;
			[Bindable]
			private var ID_FIELDNAME:String;
			
			private function init():void
			{	
				var i:int;
				
				graphicsLayer = new GraphicsLayer();
				selectedResultGraphicsLayer = new GraphicsLayer();
				resultGraphicsLayer = new GraphicsLayer();
				
				selectedResultGraphicsLayer.symbol = selectedResultSymbol;
				resultGraphicsLayer.symbol = resultSymbol;
				
				map.addLayer(graphicsLayer);
				map.addLayer(selectedResultGraphicsLayer);
				map.addLayer(resultGraphicsLayer);
				
				// start out the tool with polygon drawing tool selected
				polygonTool.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));
				
				if (configXML)
				{
					geometryService.url = GeometryServiceSingleton.instance.url;
					geometryService.token = GeometryServiceSingleton.instance.token;
					geometryService.proxyURL = GeometryServiceSingleton.instance.proxyURL;
					
					graphicsLayer.name = configXML.layername || widgetTitle;
					
					queryTask.url = configXML.queryurl;
					query.outFields = configXML.outfields.split(',');
					ID_FIELDNAME = configXML.idfield;
					reportURL = new URLRequest(configXML.reporturl);
					
					// add columns
					var columnList:XMLList = configXML.columns.column;
					resultsDG.columns = new ArrayList();
					for (i = 0; i < columnList.length(); i++)
					{
						var column:spark.components.gridClasses.GridColumn = new spark.components.gridClasses.GridColumn();
						column.dataField = columnList[i].@dataField;
						column.headerText = columnList[i].@headerText;
						resultsDG.columns.addItem(column);
					}
					
					// add typical item
					resultsDG.typicalItem = new Object();
					for (i = 0; i < configXML.typicalitem.attributes().length(); i++) {
						resultsDG.typicalItem[configXML.typicalitem.attributes()[i].localName()] = configXML.typicalitem.attributes()[i];
					}
					
					// drawing labels
					textLabel = configXML.labels.textlabel || getDefaultString("textLabel");
					textColorLabel = configXML.labels.textcolorlabel || getDefaultString("textColorLabel");
					textFontLabel = configXML.labels.textfontlabel || getDefaultString("textFontLabel");
					textSizeLabel = configXML.labels.sizelabel || getDefaultString("textSizeLabel");
					textBoldLabel = configXML.labels.textboldlabel || getDefaultString("textBoldLabel");
					textBoldTooltip = configXML.labels.textboldtooltip || getDefaultString("textBoldTooltip");
					textItalicLabel = configXML.labels.textitaliclabel || getDefaultString("textItalicLabel");
					textItalicTooltip = configXML.labels.textitalictooltip || getDefaultString("textItalicTooltip");
					textUnderlineLabel = configXML.labels.textunderlinelabel || getDefaultString("textUnderlineLabel");
					textUnderlineTooltip = configXML.labels.textunderlinetooltip || getDefaultString("textUnderlineTooltip");
					
					// polygons
					drawPolygonLabel = configXML.labels.drawpolygonlabel || getDefaultString("drawPolygonLabel");
					drawFreehandPolygonLabel = configXML.labels.drawfreehandpolygonlabel || getDefaultString("drawFreehandPolygonLabel");
					drawRectangleLabel = configXML.labels.drawrectanglelabel || getDefaultString("drawRectangleLabel");
					drawCircleLabel = configXML.labels.drawcirclelabel || getDefaultString("drawCircleLabel");
					drawEllipseLabel = configXML.labels.drawellipselabel || getDefaultString("drawEllipseLabel");
				}
			}
			
			private function activateDrawTool(event:MouseEvent):void
			{
				addSharedData("Deactivate_DrawTool", null); // to be able to deactivate drawTool on other widgets
				lastActiveEditType = "none";
				
				// clear old graphics
				clear();
				
				// apply glow
				selectedDrawingIcon = Image(event.currentTarget);
				clearSelectionFilter();
				selectedDrawingIcon.filters = [ glowFilter ];
				
				showMeasurements = false;
				isEditing = false;
				drawType = selectedDrawingIcon.name;
				switch (drawType)
				{
					case DrawTool.EXTENT:
					{
						addingText = drawingPoint = drawingLine = false;
						drawingPolygon = true;
						showMeasurements = true;
						
						drawStatus = drawRectangleLabel;
						setMapAction(drawType, drawStatus, fillSymbol, map_drawEndHandler);
						break;
					}
					case DrawTool.CIRCLE:
					{
						addingText = drawingPoint = drawingLine = false;
						drawingPolygon = true;
						showMeasurements = true;
						
						drawStatus = drawCircleLabel;
						setMapAction(drawType, drawStatus, fillSymbol, map_drawEndHandler);
						break;
					}
					case DrawTool.ELLIPSE:
					{
						addingText = drawingPoint = drawingLine = false;
						drawingPolygon = true;
						showMeasurements = true;
						
						drawStatus = drawEllipseLabel;
						setMapAction(drawType, drawStatus, fillSymbol, map_drawEndHandler);
						break;
					}
					case DrawTool.POLYGON:
					{
						addingText = drawingPoint = drawingLine = false;
						drawingPolygon = true;
						showMeasurements = true;
						
						drawStatus = drawPolygonLabel;
						setMapAction(drawType, drawStatus, fillSymbol, map_drawEndHandler);
						break;
					}
					case DrawTool.FREEHAND_POLYGON:
					{
						addingText = drawingPoint = drawingLine = false;
						drawingPolygon = true;
						showMeasurements = true;
						
						drawStatus = drawFreehandPolygonLabel;
						setMapAction(drawType, drawStatus, fillSymbol, map_drawEndHandler);
						break;
					}
				}
			}
			
			private function clear():void
			{
				graphicsLayer.clear();
				resultGraphicsLayer.clear();
				selectedResultGraphicsLayer.clear();
				resultsAC.removeAll();
			}
			
			private function clearSelectionFilter():void
			{
				for (var i:int = 0; i < drawImageGroup.numChildren; i++)
				{
					if (drawImageGroup.getChildAt(i).filters && drawImageGroup.getChildAt(i).filters.length > 0)
					{
						if (!(selectedDrawingIcon && drawImageGroup.getChildAt(i) === selectedDrawingIcon))
						{
							drawImageGroup.getChildAt(i).filters = [];
						}
					}
				}
			}
			
			private function getMeasurementGraphic(graphic:Graphic):Graphic
			{
				var result:Graphic;
				for (var i:int = 0; i < graphicsLayer.numGraphics; )
				{
					if (Graphic(graphicsLayer.getChildAt(i)).name == graphic.id)
					{
						result = Graphic(graphicsLayer.getChildAt(i));
						break;
					}
					else
					{
						i++;
					}
				}
				return result;
			}
			
			private function map_drawEndHandler(event:DrawEvent):void
			{
				selectedDrawingIcon = null;
				clearSelectionFilter();
				event.target.deactivate();
				
				lastDrawnGraphic = event.graphic;
				
				var customContextMenu:ContextMenu = new ContextMenu();
				customContextMenu.hideBuiltInItems();
				var menuItem:ContextMenuItem = new ContextMenuItem(clearFeatureLabel);
				menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItem_contextMenuDeleteHandler);
				customContextMenu.customItems.push(menuItem);
				lastDrawnGraphic.contextMenu = customContextMenu;
				
				graphicsLayer.add(lastDrawnGraphic);
				
				var geom:Geometry = lastDrawnGraphic.geometry;
				lastDrawnGraphic.symbol = fillSymbol;
				
				// query for intersections
				if (needToSimplifyPolygon(lastDrawnGraphic.geometry))
				{
					GeometryServiceSingleton.instance.simplify([lastDrawnGraphic.geometry], new AsyncResponder(onResult, onFault));
					
					function onResult(result:Array, token:Object = null):void {
						findIntersectingParcels(lastDrawnGraphic.geometry);
					}
				}
				else
				{
					findIntersectingParcels(lastDrawnGraphic.geometry);
				}
			}
			
			private function menuItem_contextMenuDeleteHandler(event:ContextMenuEvent):void
			{
				graphicsLayer.remove(Graphic(event.contextMenuOwner));
				// also remove measurement label if any
				graphicsLayer.remove(getMeasurementGraphic(Graphic(event.contextMenuOwner)));
			}
			
			private function drawIcon_rollOverHandler(event:MouseEvent):void
			{
				clearSelectionFilter();
				event.target.filters = [ glowFilter ];
			}
			
			private function drawIcon_rollOutHandler(event:MouseEvent):void
			{
				clearSelectionFilter();
			}
			
			private function map_mouseDownHandler(event:MouseEvent):void
			{
				map.removeEventListener(MouseEvent.MOUSE_DOWN, map_mouseDownHandler);
				map.addEventListener(MouseEvent.MOUSE_UP, map_mouseUpHandler);
				map.addEventListener(MouseEvent.MOUSE_MOVE, map_mouseMoveHandler);
			}
			
			private function map_mouseUpHandler(event:MouseEvent):void
			{
				if (event.target !== editGraphic)
				{
					map.removeEventListener(MouseEvent.MOUSE_UP, map_mouseUpHandler);
					map.removeEventListener(MouseEvent.MOUSE_MOVE, map_mouseMoveHandler);
					
					isEditing = false;
					editGraphic = null;
					lastActiveEditType = "none";
				}
			}
			
			private function map_mouseMoveHandler(event:MouseEvent):void
			{
				map.addEventListener(MouseEvent.MOUSE_DOWN, map_mouseDownHandler);
				map.removeEventListener(MouseEvent.MOUSE_UP, map_mouseUpHandler);
				map.removeEventListener(MouseEvent.MOUSE_MOVE, map_mouseMoveHandler);
			}
			
			private function hideMeasureLabel(event:EditEvent):void
			{
				if (measurementLabelShown)
				{
					getMeasurementGraphic(editGraphic).visible = false;
				}
			}
			
			private function editTool_vertexAddDeleteHandler(event:EditEvent):void
			{
				if (map.wrapAround180)
				{
					normalizeGraphicGeometry(event.graphic);
				}
				else if (measurementLabelShown)
				{
					recalculate(event.graphic);
				}
			}
			
			private function editTool_vertexMoveStopHandler(event:EditEvent):void
			{
				if (map.wrapAround180)
				{
					normalizeGraphicGeometry(event.graphic);
				}
				else if (measurementLabelShown)
				{
					recalculate(event.graphic);
				}
			}
			
			private function editTool_graphicsMoveStopHandler(event:EditEvent):void
			{
				if (map.wrapAround180)
				{
					normalizeGraphicGeometry(event.graphics[0]);
				}
				else if (measurementLabelShown)
				{
					recalculate(event.graphics[0]);
				}
			}
			
			private function editTool_graphicRotateStopHandler(event:EditEvent):void
			{
				if (map.wrapAround180)
				{
					normalizeGraphicGeometry(event.graphic);
				}
				else if (measurementLabelShown)
				{
					recalculate(event.graphic);
				}
			}
			
			private function editTool_graphicScaleStopHandler(event:EditEvent):void
			{
				if (map.wrapAround180)
				{
					normalizeGraphicGeometry(event.graphic);
				}
				else if (measurementLabelShown)
				{
					recalculate(event.graphic);
				}
			}
			
			private function normalizeGraphicGeometry(graphic:Graphic):void
			{
				// normalize
				GeometryUtil.normalizeCentralMeridian([ graphic.geometry ], GeometryServiceSingleton.instance, new AsyncResponder(getNormalizedGeometryFunction, faultFunction));
				function getNormalizedGeometryFunction(item:Object, token:Object = null):void
				{
					var normalizedGeometries:Array = item as Array;
					graphic.geometry = normalizedGeometries[0];
				}
				function faultFunction(fault:Fault, token:Object = null):void
				{
					dispatchEvent(new FaultEvent(FaultEvent.FAULT, false, false, fault));
				}
			}
			
			private function recalculate(graphic:Graphic):void
			{
				var geom:Geometry = graphic.geometry;
			}
			
			private function geometryService_projectCompleteHandler(event:GeometryServiceEvent):void
			{
				var geom:Geometry = (event.result as Array)[0];
			}
			
			private function isWebMercator(wkid:Number):Boolean
			{
				return wkid == 102100 || wkid == 3857 || wkid == 102113;
			}
			
			private function geometryService_simplifyCompleteHandler(event:GeometryServiceEvent):void
			{
				var polygon:Polygon = event.result[0] as Polygon;
				lastDrawnGraphic.geometry = polygon; //update to avoid simplifying again
			}
			
			private function geometryService_faultHandler(info:Object, token:Object = null):void
			{
				showError(info.toString());
			}
			
			protected function queryTask_faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString + "\n\n" + event.fault.faultDetail, "QueryTask Fault " + event.fault.faultCode);
			}
			
			private function wTemplate_closeHandler(event:Event):void
			{
				graphicsLayer.visible = false;
				resultGraphicsLayer.visible = false;
				selectedResultGraphicsLayer.visible = false;
				
				setMapAction(null, null, null, null); // deactivate drawTool
				
				if (selectedDrawingIcon)
				{
					selectedDrawingIcon.filters = [];
					selectedDrawingIcon = null;
				}
			}
			
			private function wTemplate_openHandler(event:Event):void
			{
				if (graphicsLayer)
				{
					graphicsLayer.visible = true;
					resultGraphicsLayer.visible = true;
					selectedResultGraphicsLayer.visible = true;
				}
			}
			
			private function clearErrors():void
			{
				error.visible = false;
				content.visible = true;
			}
			
			// given a geometry, find intersecting parcels by querying
			private function findIntersectingParcels(geom:Geometry):void
			{
				// indicate query is in progress
				loadingMessage.visible = true;
				query.geometry = geom;
				queryTask.execute(query, new AsyncResponder(onResult, onFault));
				
				function onResult(featureSet:FeatureSet, token:Object = null):void
				{
					loadingMessage.visible = false;
					if (featureSet.features.length > 0)
					{
						graphicsLayer.clear();
						for each (var graphic:Graphic in featureSet.features)
						{
							// Add result data
							resultsAC.addItem(graphic.attributes);
							// Show hexagons
							resultGraphicsLayer.add(graphic);
						}
						
						// Show warning if maximum records returned
						if (featureSet.features.length == 1000) {
							Alert.show("You selected 1000 or more hexagons. Due to technological limitations, your selection was reduced to the 1000 hexagons highlighted on the map.");
						}
						
						// Show error if geometry not found
						if (!featureSet.features[0].geometry)
						{
							Alert.show("Geometry wasn't returned for the result. The 'Shape' column on the service probably wasn't made available to the query. As a result, use of the tool may be limited.");
						}
						else {
							// Zoom to the new extent
							map.extent = GraphicUtil.getGraphicsExtent(featureSet.features).expand(resultExtentFactor);
						}
					}
					else
					{
						Alert.show("No parcels were found in the selected area.");
					}
				}
			}
			
			// returns true if a geometry should be simplified before use in a query
			private function needToSimplifyPolygon(geom:Geometry):Boolean
			{
				var hasSelfIntersectingPolygons:Boolean = false;
				
				if (geom.type == Geometry.POLYGON)
				{
					if (GeometryUtil.polygonSelfIntersecting(geom as Polygon))
					{
						hasSelfIntersectingPolygons = true;
					}
				}
				
				return hasSelfIntersectingPolygons;
			}
			
			private function onFailureToConnect(info:Object, token:Object = null):void
			{
				raiseError("Could not connect to the service.");
			}
			
			private function onFault(info:Object, token:Object = null):void
			{
				loadingMessage.visible = false;
				Alert.show(info.toString(), wTemplate.widgetTitle);
			}
			
			private function raiseError(errorText:String):void
			{
				clearErrors();
				error.text = "Error: " + errorText;
				error.visible = true;
				content.visible = false;
			}
			
			// highlight and zoom to selected result
			private function selectedResultChangeHandler():void
			{
				// Clear the previously-selected item, if exists
				selectedResultGraphicsLayer.clear();
				
				// Find and copy the graphic to the selection graphics layer
				for each (var graphic:Graphic in resultGraphicsLayer.graphicProvider)
				{
					if (graphic.attributes == resultsDG.selectedItem)
					{
						selectedResultGraphicsLayer.add(new Graphic(graphic.geometry, null, graphic.attributes));
						break;
					}
				}
			}
			
			private function viewReport():void
			{
				function getIDs(ac:ArrayCollection):Array {
					var result:Array = new Array();
					for (var i:int = 0; i < ac.length; i++) {
						result.push(ac.getItemAt(i)[ID_FIELDNAME]);
					}
					return result;
				}
				reportURL.data = "features=" + getIDs(resultsAC).join(",");
				navigateToURL(reportURL);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:GlowFilter id="glowFilter"
					  alpha="1"
					  color="{getStyle('focusColor')}"
					  inner="true"
					  strength="2"/>
		<esri:GeometryService id="geometryService"
							  fault="geometryService_faultHandler(event)"
							  projectComplete="geometryService_projectCompleteHandler(event)"
							  simplifyComplete="geometryService_simplifyCompleteHandler(event)"/>
		<esri:Query id="query"
					outSpatialReference="{map.spatialReference}"
					spatialRelationship="esriSpatialRelIntersects"
					returnGeometry="true"/>
		<esri:QueryTask id="queryTask"
						fault="queryTask_faultHandler(event)"
						useAMF="false"/>
		<esri:SimpleFillSymbol id="fillSymbol"
							   alpha="0.8"
							   color="#3FAFDC">
			<esri:SimpleLineSymbol width="2"
								   color="#3FAFDC"
								   style="solid"/>
		</esri:SimpleFillSymbol>
		<esri:SimpleFillSymbol id="selectedResultSymbol"
							   alpha="0.7"
							   color="#FFFFFF">
		</esri:SimpleFillSymbol>
		<esri:SimpleFillSymbol id="resultSymbol"
							   alpha="0.5"
							   color="#3FAFDC">
			<esri:SimpleLineSymbol width="2"
								   color="#3FAFDC"
								   style="solid"/>
		</esri:SimpleFillSymbol>
	</fx:Declarations>
	
	<viewer:WidgetTemplate id="wTemplate"
						   width="480" height="355"
						   closed="wTemplate_closeHandler(event)"
						   minHeight="300"
						   minWidth="480"
						   open="wTemplate_openHandler(event)">
		<s:Label id="error"
				 visible="false"
				 width="100%"/>
		<s:Scroller id="content"
					width="100%" height="100%">
			<s:VGroup width="100%"
					  gap="2">
				<s:HGroup id="drawImageGroup"
						  width="100%"
						  gap="2"
						  horizontalAlign="center">
					<s:VGroup>
						<s:Label text="Select area" />
					</s:VGroup>
					<mx:Image name="{DrawTool.EXTENT}"
							  width="40" height="40"
							  buttonMode="true"
							  click="activateDrawTool(event)"
							  rollOut="drawIcon_rollOutHandler(event)"
							  rollOver="drawIcon_rollOverHandler(event)"
							  source="assets/images/i_draw_rect.png"
							  toolTip="{drawRectangleLabel}"
							  useHandCursor="true"/>
					<mx:Image name="{DrawTool.CIRCLE}"
							  width="40" height="40"
							  buttonMode="true"
							  click="activateDrawTool(event)"
							  rollOut="drawIcon_rollOutHandler(event)"
							  rollOver="drawIcon_rollOverHandler(event)"
							  source="assets/images/i_draw_circle.png"
							  toolTip="{drawCircleLabel}"
							  useHandCursor="true"/>
					<mx:Image name="{DrawTool.ELLIPSE}"
							  width="40" height="40"
							  buttonMode="true"
							  click="activateDrawTool(event)"
							  rollOut="drawIcon_rollOutHandler(event)"
							  rollOver="drawIcon_rollOverHandler(event)"
							  source="assets/images/i_draw_ellipse.png"
							  toolTip="{drawEllipseLabel}"
							  useHandCursor="true"/>
					<mx:Image name="{DrawTool.POLYGON}"
							  id="polygonTool"
							  width="40" height="40"
							  buttonMode="true"
							  click="activateDrawTool(event)"
							  rollOut="drawIcon_rollOutHandler(event)"
							  rollOver="drawIcon_rollOverHandler(event)"
							  source="assets/images/i_draw_poly.png"
							  toolTip="{drawPolygonLabel}"
							  useHandCursor="true"/>
					<mx:Image name="{DrawTool.FREEHAND_POLYGON}"
							  width="40" height="40"
							  buttonMode="true"
							  click="activateDrawTool(event)"
							  rollOut="drawIcon_rollOutHandler(event)"
							  rollOver="drawIcon_rollOverHandler(event)"
							  source="assets/images/i_draw_freepoly.png"
							  toolTip="{drawFreehandPolygonLabel}"
							  useHandCursor="true"/>
				</s:HGroup>
				<s:DataGrid id="resultsDG"
							dataProvider="{resultsAC}"
							maxHeight="200" width="100%"
							visible="{resultsAC.length > 0}"
							includeInLayout="{resultsAC.length > 0}"
							selectionChange="selectedResultChangeHandler()">
				</s:DataGrid>
				<s:HGroup id="loadingMessage"
						  horizontalAlign="center"
						  verticalAlign="middle"
						  width="100%"
						  visible="false">
					<s:Label text="Loading..." />
					<mx:Image source="assets/images/loader.swf"/>
				</s:HGroup>
				<s:Button id="viewReportBtn"
						  click="viewReport()"
						  label="View Printable Report"
						  visible="{resultsAC.length > 0}"/>
			</s:VGroup>
		</s:Scroller>
	</viewer:WidgetTemplate>
</viewer:BaseWidget>