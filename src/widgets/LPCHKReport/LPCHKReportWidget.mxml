<?xml version="1.0" encoding="utf-8"?>
<!--
	 This widget contains code from ESRI's ArcGIS Viewer for Flex 2.4, which is
	 subject to the following notice.

     ////////////////////////////////////////////////////////////////////////////////
     //
     // Copyright (c) 2010 Esri
     //
     // All rights reserved under the copyright laws of the United States.
     // You may freely redistribute and use this software, with or
     // without modification, provided you include the original copyright
     // and use restrictions.  See use restrictions in the file:
     // <install location>/License.txt
     //
     ////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:viewer="com.esri.viewer.*"
                   xmlns:esri="http://www.esri.com/2008/ags"
                   creationComplete="init()">

    <fx:Script>
        <![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.supportClasses.AllDetails;
			import com.esri.ags.symbols.Symbol;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tools.DrawTool;
			import com.esri.ags.tools.NavigationTool;
			import com.esri.ags.utils.GeometryUtil;
			import com.esri.ags.utils.GraphicUtil;
			import com.esri.viewer.AppEvent;
			
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.mx_internal;
			import mx.rpc.AsyncResponder;
			import mx.rpc.events.FaultEvent;

			private var finishDrawing:Boolean;
			private var graphicContextMenu:ContextMenu;
			private var graphicsLayer:GraphicsLayer = new GraphicsLayer();
			private var layerName:String = "Lesser prairie-chicken crucial habitat index";
			private var selectedDrawingIcon:Image;
			private var selectedResultGraphicsLayer:GraphicsLayer = new GraphicsLayer();
			private var resultExtentFactor:Number = 2;
			private var resultGraphicsLayer:GraphicsLayer = new GraphicsLayer();

			[Bindable]
			private var connectedToServer:Boolean;
			[Bindable]
			private var polygonLabel:String;
			[Bindable]
			private var freehandPolygonLabel:String;
			[Bindable]
			private var rectangleLabel:String;
			[Bindable]
			private var circleLabel:String;
			[Bindable]
			private var ellipseLabel:String;
			[Bindable]
			private var resultsAC:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var reportURL:URLRequest = new URLRequest('http://kars.ku.edu/reports/sgpchat/');

			private function activateDrawTool(event:MouseEvent):void
			{
				addSharedData("Deactivate_DrawTool", null); // to be able to deactivate drawTool on other widgets

				// Clear old graphics
				graphicsLayer.clear();
				resultGraphicsLayer.clear();
				selectedResultGraphicsLayer.clear();
				
				// Clear old data
				resultsAC.removeAll();

				// apply glow
				selectedDrawingIcon = Image(event.currentTarget);
				clearSelectionFilter();
				selectedDrawingIcon.filters = [ glowFilter ];
				
				finishDrawing = false;
				
				// TODO (Patrick) Any callbacks to reset previous results / display
				var status:String;
				var value:String = selectedDrawingIcon.name;
				switch (value)
				{
					case DrawTool.POLYGON:
					{
						status = polygonLabel;
						break;
					}
					case DrawTool.FREEHAND_POLYGON:
					{
						status = freehandPolygonLabel;
						break;
					}
					case DrawTool.EXTENT:
					{
						status = rectangleLabel;
						break;
					}
					case DrawTool.CIRCLE:
					{
						status = circleLabel;
						break;
					}
					case DrawTool.ELLIPSE:
					{
						status = ellipseLabel;
						break;
					}
				}
				setMapAction(value, status, drawSymbol, map_drawEndHandler);
			}
			
			private function clearErrors():void
			{
				initStatus.visible = false;
				error.visible = false;
				content.visible = true;
			}
			
			private function clearSelectionFilter():void
			{
				for (var i:int = 0; i < areaSelectionTools.numChildren; i++)
				{
					if (areaSelectionTools.getChildAt(i).filters && areaSelectionTools.getChildAt(i).filters.length > 0)
					{
						if (!(selectedDrawingIcon && areaSelectionTools.getChildAt(i) === selectedDrawingIcon))
						{
							areaSelectionTools.getChildAt(i).filters = [];
						}
					}
				}
			}
			
			// Given a geometry, find intersecting parcels by querying
			private function findIntersectingParcels(geom:Geometry):void
			{
				// Indicate query is in progress
				loadingMessage.visible = true;
				query.geometry = geom;
				queryTask.execute(query, new AsyncResponder(onResult, onFault));
				
				function onResult(featureSet:FeatureSet, token:Object = null):void
				{
					loadingMessage.visible = false;
					if (featureSet.features.length > 0)
					{
						graphicsLayer.clear();
						for each (var graphic:Graphic in featureSet.features)
						{
							// Add result data
							resultsAC.addItem(graphic.attributes);
							// Show hexagons
							resultGraphicsLayer.add(graphic);
						}
						
						// Show warning if maximum records returned
						if (featureSet.features.length == 1000) {
							Alert.show("You selected 1000 or more hexagons. Due to technological limitations, your selection was reduced to the 1000 hexagons highlighted on the map.");
						}
						
						// Show error if geometry not found
						if (!featureSet.features[0].geometry)
						{
							Alert.show("Geometry wasn't returned for the result. The 'Shape' column on the service probably wasn't made available to the query. As a result, use of the tool may be limited.");
						}
						else {
							// Zoom to the new extent
							map.extent = GraphicUtil.getGraphicsExtent(featureSet.features).expand(resultExtentFactor);
						}
					}
					else
					{
						Alert.show("No parcels were found in the selected area.");
					}
				}
			}
			
			private function milesRoadLabelFunction(item:Object, column:spark.components.gridClasses.GridColumn):String
			{
				return String(int(Number(item.miles_rd)*10)/10);
			}
			
			// Determines and sets the correct queryTask url
			private function serviceDetailsHandler(result:AllDetails, token:Object = null):void
			{
				var layers:Array = result.layersDetails;
				for (var i:int = 0; i<layers.length; i++) {
					if (layers[i].name == layerName) {
						queryTask.url = service.url + "/" + layers[i].id;
						initStatus.text = "Succesfully connected to the service.";
						initStatus.visible = false;
						content.visible = true;
						break;
					}
				}

				if (!queryTask.url)
				{
					raiseError("Could not find the layer '" + layerName + "' on the service. Does it exist?");
				}
			}
			
			private function icon_rollOverHandler(event:MouseEvent):void
			{
				clearSelectionFilter();
				event.target.filters = [ glowFilter ];
			}
			
			private function icon_rollOutHandler(event:MouseEvent):void
			{
				clearSelectionFilter();
			}
			
            private function init():void
            {
				// Determine the correct url for the service
				service.getAllDetails(new AsyncResponder(serviceDetailsHandler, onFailureToConnect));
				
				// Configure user selection graphics layer
				map.addLayer(graphicsLayer);
				
				// Configure results graphics layer
				resultGraphicsLayer.symbol = resultSymbol;
				map.addLayer(resultGraphicsLayer);
				
				// Configure selected result graphics layer
				selectedResultGraphicsLayer.symbol = selectedResultSymbol;
				map.addLayer(selectedResultGraphicsLayer);
				
				geometryService.url = configData.geometryservice;
			}

			private function map_drawEndHandler(event:DrawEvent):void
			{
				// deactivate the draw tool
				finishDrawing = true;
				
				selectedDrawingIcon = null;
				clearSelectionFilter();
				
				onTurnOnNav();
				
				var graphic:Graphic = event.graphic;
				graphic.contextMenu = graphicContextMenu;
				
				if (graphic.geometry is Extent)
				{
					// convert extent to a polygon
					const extent:Extent = Extent(graphic.geometry);
					var extentPolygon:Polygon = new Polygon(null, map.spatialReference);
					extentPolygon.rings = [[
						new MapPoint(extent.xmin, extent.ymin),
						new MapPoint(extent.xmax, extent.ymin),
						new MapPoint(extent.xmax, extent.ymax),
						new MapPoint(extent.xmin, extent.ymax),
						new MapPoint(extent.xmin, extent.ymin)
					]];
					graphic.geometry = extentPolygon;
				}
				graphic.symbol = drawSymbol;
				
				// add graphic to the graphics layer
				graphicsLayer.add(graphic);

				// Indicate report is loading
				loadingMessage.visible = true;

				// Query for intersections
				if (needToSimplifyPolygon(graphic.geometry))
				{
					geometryService.simplify([graphic.geometry], new AsyncResponder(onResult, onFault));
					
					function onResult(result:Array, token:Object = null):void {
						findIntersectingParcels(graphic.geometry);
					}
				}
				else
				{
					findIntersectingParcels(graphic.geometry);
				}
			}
			
			// Returns true if a geometry should be simplified before use in a query
			private function needToSimplifyPolygon(geom:Geometry):Boolean
			{
				var hasSelfIntersectingPolygons:Boolean = false;
				
				if (geom.type == Geometry.POLYGON)
				{
					if (GeometryUtil.polygonSelfIntersecting(geom as Polygon))
					{
						hasSelfIntersectingPolygons = true;
					}
				}

				return hasSelfIntersectingPolygons;
			}
			
			private function onFailureToConnect(info:Object, token:Object = null):void
			{
				raiseError("Could not connect to the service.");
			}
			
			private function onFault(info:Object, token:Object = null):void
			{
				loadingMessage.visible = false;
				Alert.show(info.toString(), wTemplate.widgetTitle);
			}
			
			private function onTurnOnNav():void
			{
				setMapNavigation(NavigationTool.PAN, "Pan Map");
			}
			
			protected function queryTask_faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString + "\n\n" + event.fault.faultDetail, "QueryTask Fault " + event.fault.faultCode);
			}
			
			private function raiseError(errorText:String):void
			{
				clearErrors();
				error.text = "Error: " + errorText;
				error.visible = true;
				content.visible = false;
			}

			// Highlight and zoom to selected result
			private function selectedResultChangeHandler():void
			{
				// Clear the previously-selected item, if exists
				selectedResultGraphicsLayer.clear();

				// Find and copy the graphic to the selection graphics layer
				for each (var graphic:Graphic in resultGraphicsLayer.graphicProvider)
				{
					if (graphic.attributes == resultsDG.selectedItem)
					{
						selectedResultGraphicsLayer.add(new Graphic(graphic.geometry, null, graphic.attributes));
						break;
					}
				}
			}

			private function viewerContainer_dataPublishHandler(event:AppEvent):void
			{
				var data:Object = event.data;
				
				if (data.key == "Deactivate_DrawTool")
				{
					setMapAction(null, null, null, null);
					if (selectedDrawingIcon)
					{
						selectedDrawingIcon.filters = [];
						selectedDrawingIcon = null;
					}
				}
			}
			
			private function viewReport():void
			{
				function getHexIds(ac:ArrayCollection):Array {
					var result:Array = new Array();
					for (var i:int = 0; i < ac.length; i++) {
						result.push(ac.getItemAt(i).Hex_ID);
					}
					return result;
				}
				reportURL.data = "features=" + getHexIds(resultsAC).join(",");
				navigateToURL(reportURL);
			}
			
			private function wTemplate_closedHandler(event:Event):void
			{
				graphicsLayer.visible = false;
				resultGraphicsLayer.visible = false;
				selectedResultGraphicsLayer.visible = false;
				
				setMapAction(null, null, null, null); // deactivate drawTool
				if (selectedDrawingIcon)
				{
					selectedDrawingIcon.filters = [];
					selectedDrawingIcon = null;
				}
			}
			
			private function wTemplate_openHandler(event:Event):void
			{				
				graphicsLayer.visible = true;
				resultGraphicsLayer.visible = true;
				selectedResultGraphicsLayer.visible = true;
			}
			
			private function wTemplate_minimizedHandler(event:Event):void
			{
				graphicsLayer.visible = false;
				resultGraphicsLayer.visible = false;
				selectedResultGraphicsLayer.visible = false;
			}
        ]]>
    </fx:Script>

    <fx:Declarations>
		<esri:ArcGISDynamicMapServiceLayer id="service"
										   url="http://kars.ku.edu/ArcGIS/rest/services/SingleLayers/LEPCCrucialHabitatIndex/MapServer" />
		<esri:GeometryService id="geometryService"
							  fault="onFault(event)"/>
		<esri:Query id="query"
					outFields="{resultsDG.columns.toArray().map(function(column:spark.components.gridClasses.GridColumn, index:int, arr:Array):String {return column.dataField;})}"
					outSpatialReference="{map.spatialReference}"
					spatialRelationship="esriSpatialRelIntersects"
					returnGeometry="true"/>
		<esri:QueryTask id="queryTask"
						fault="queryTask_faultHandler(event)"
						useAMF="false"/>
		<esri:SimpleFillSymbol id="drawSymbol"
							   alpha="0.8"
							   color="#3FAFDC">
			<esri:SimpleLineSymbol width="2"
								   color="#3FAFDC"
								   style="solid"/>
		</esri:SimpleFillSymbol>
		<esri:SimpleFillSymbol id="selectedResultSymbol"
							   alpha="0.7"
							   color="#FFFFFF">
		</esri:SimpleFillSymbol>
		<esri:SimpleFillSymbol id="resultSymbol"
							   alpha="0.5"
							   color="#3FAFDC">
			<esri:SimpleLineSymbol width="2"
								   color="#3FAFDC"
								   style="solid"/>
		</esri:SimpleFillSymbol>
		<s:GlowFilter id="glowFilter"
					  alpha="1"
					  color="{getStyle('focusColor')}"
					  inner="true"
					  strength="2"/>
    </fx:Declarations>

    <viewer:WidgetTemplate id="wTemplate"
                           width="480" height="355"
						   closed="wTemplate_closedHandler(event)"
						   minHeight="300"
						   minWidth="320"
						   minimized="wTemplate_minimizedHandler(event)"
						   open="wTemplate_openHandler(event)">
		<s:Label id="error"
				 visible="false"
				 width="100%"/>
		<s:Label id="initStatus"
				 text="Attemping to connect to the service..."
				 width="100%" />
		<s:Scroller id="content"
					width="100%" height="100%"
					visible="false">
			<s:VGroup width="100%">

				<s:HGroup id="areaSelectionTools">
					<s:VGroup>
						<s:Label text="Select area" />
					</s:VGroup>
					<mx:Image name="{DrawTool.EXTENT}"
							  width="40" height="40"
							  buttonMode="true"
							  click="activateDrawTool(event)"
							  rollOut="icon_rollOutHandler(event)"
							  rollOver="icon_rollOverHandler(event)"
							  source="assets/images/i_draw_rect.png"
							  toolTip="{rectangleLabel}"
							  useHandCursor="true"/>
					<mx:Image name="{DrawTool.CIRCLE}"
							  width="40" height="40"
							  buttonMode="true"
							  click="activateDrawTool(event)"
							  rollOut="icon_rollOutHandler(event)"
							  rollOver="icon_rollOverHandler(event)"
							  source="assets/images/i_draw_circle.png"
							  toolTip="{circleLabel}"
							  useHandCursor="true"/>
					<mx:Image name="{DrawTool.ELLIPSE}"
							  width="40" height="40"
							  buttonMode="true"
							  click="activateDrawTool(event)"
							  rollOut="icon_rollOutHandler(event)"
							  rollOver="icon_rollOverHandler(event)"
							  source="assets/images/i_draw_ellipse.png"
							  toolTip="{ellipseLabel}"
							  useHandCursor="true"/>
					<mx:Image name="{DrawTool.POLYGON}"
							  width="40" height="40"
							  buttonMode="true"
							  click="activateDrawTool(event)"
							  rollOut="icon_rollOutHandler(event)"
							  rollOver="icon_rollOverHandler(event)"
							  source="assets/images/i_draw_poly.png"
							  toolTip="{polygonLabel}"
							  useHandCursor="true"/>
					<mx:Image name="{DrawTool.FREEHAND_POLYGON}"
							  width="40" height="40"
							  buttonMode="true"
							  click="activateDrawTool(event)"
							  rollOut="icon_rollOutHandler(event)"
							  rollOver="icon_rollOverHandler(event)"
							  source="assets/images/i_draw_freepoly.png"
							  toolTip="{freehandPolygonLabel}"
							  useHandCursor="true"/>
				</s:HGroup>
					<s:DataGrid id="resultsDG"
								dataProvider="{resultsAC}"
								maxHeight="200" width="100%"
								visible="{resultsAC.length > 0}"
								includeInLayout="{resultsAC.length > 0}"
								selectionChange="selectedResultChangeHandler()">
							<s:typicalItem>
								<s:DataItem Hex_ID="Hexagon ID"
											miles_rd="99999999.9"
											actv_wells="Active WellsX"
											FAA_vert="Vertical StructuresXX"
											mngd_area="not near managed areaX"
											WCrane_cor="outside 95% whooping crane corridor"
											LPC_range="outside LPC EOR"
											LPC_habit="LEPC Crucial Habitat Index"/>
							</s:typicalItem>
						<s:columns>
							<s:ArrayList>
								<s:GridColumn dataField="Hex_ID" headerText="Hexagon ID"/>
								<s:GridColumn dataField="miles_rd" 
											  labelFunction="{milesRoadLabelFunction}"
											  headerText="Miles Road"/>
								<s:GridColumn dataField="actv_wells" headerText="Active Wells"/>
								<s:GridColumn dataField="FAA_vert" headerText="Vertical Structures"/>
								<s:GridColumn dataField="mngd_area" headerText="Managed Area"/>
								<s:GridColumn dataField="WCrane_cor" headerText="Whooping Crane Corridor"/>
								<s:GridColumn dataField="LPC_range" headerText="LEPC Range"/>
								<s:GridColumn dataField="LPC_habit" headerText="LEPC Crucial Habitat Index"/>								
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>

				<s:HGroup id="loadingMessage"
						  horizontalAlign="center"
						  verticalAlign="middle"
						  width="100%"
						  visible="false">
					<s:Label text="Loading..." />
					<mx:Image source="assets/images/loader.swf"/>
				</s:HGroup>
				<s:Button id="viewReportBtn"
						  click="viewReport()"
						  label="View Printable Report"
						  visible="{resultsAC.length > 0}"/>
			</s:VGroup>
		</s:Scroller>		
    </viewer:WidgetTemplate>
</viewer:BaseWidget>